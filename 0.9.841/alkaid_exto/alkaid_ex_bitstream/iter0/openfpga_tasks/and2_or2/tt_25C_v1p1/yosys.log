
 /----------------------------------------------------------------------------\
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |  Copyright (C) 2012 - 2025  Claire Xenia Wolf <claire@yosyshq.com>         |
 |  Distributed under an ISC-like license, type "license" to see terms        |
 \----------------------------------------------------------------------------/
 Yosys 0.51+17 (git sha1 42ca75b6b, g++ 11.4.0-13 -fPIC -O3)

-- Executing script file `/home/yhjiang/Desktop/test_project/to_Mickey/20250911/0.9.841/alkaid_exto/alkaid_ex_bitstream/iter0/openfpga_tasks/and2_or2/tt_25C_v1p1/run.ys' --

1. Executing Verilog-2005 frontend: /rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/..//etc/benchmarks/alkaid_benchmark/checkin/and2_or2/and2_or2.v
Parsing Verilog input from `/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/..//etc/benchmarks/alkaid_benchmark/checkin/and2_or2/and2_or2.v' to AST representation.
Generating RTLIL representation for module `\and2_or2'.
Successfully finished Verilog frontend.
Selected device family: alkaidC
Warning: Force to disable dsp inference as the selected device does not contain dedicated resources
Warning: Force to disable RAM inference as the selected device does not contain dedicated resources

2. Executing SYNTH_RAPIDFLEX pass.

2.1. Executing Verilog-2005 frontend: /rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/common/cells_sim.v
Parsing Verilog input from `/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

2.2. Executing Verilog-2005 frontend: /rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim.v
Parsing Verilog input from `/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim.v' to AST representation.
Generating RTLIL representation for module `\_fpga_adder'.
Generating RTLIL representation for module `\dff'.
Generating RTLIL representation for module `\dffr'.
Generating RTLIL representation for module `\dffs'.
Generating RTLIL representation for module `\dffrn'.
Generating RTLIL representation for module `\dffsn'.
Generating RTLIL representation for module `\sdffr'.
Generating RTLIL representation for module `\sdffs'.
Generating RTLIL representation for module `\sdffrn'.
Generating RTLIL representation for module `\sdffsn'.
Generating RTLIL representation for module `\dffn'.
Generating RTLIL representation for module `\dffnr'.
Generating RTLIL representation for module `\dffns'.
Generating RTLIL representation for module `\dffnrn'.
Generating RTLIL representation for module `\dffnsn'.
Generating RTLIL representation for module `\sdffnr'.
Generating RTLIL representation for module `\sdffns'.
Generating RTLIL representation for module `\sdffnrn'.
Generating RTLIL representation for module `\sdffnsn'.
Generating RTLIL representation for module `\dffnr_dffr'.
Generating RTLIL representation for module `\dffr_dffnr'.
Generating RTLIL representation for module `\pcounterN_clkp_srstn_load'.
Generating RTLIL representation for module `\pcounter32_clkp_srstn_load'.
Generating RTLIL representation for module `\pcounterN_clkp_srstn_load_ccb'.
Generating RTLIL representation for module `\pcounter32_clkp_srstn_load_ccb'.
Generating RTLIL representation for module `\pcounterN_clkp_srstn_add'.
Generating RTLIL representation for module `\pcounter32_clkp_srstn_add'.
Generating RTLIL representation for module `\pcounterN_clkp_srstn_add_ccb'.
Generating RTLIL representation for module `\pcounter32_clkp_srstn_add_ccb'.
Generating RTLIL representation for module `\pcounterN_clkp_srstn_sub'.
Generating RTLIL representation for module `\pcounter32_clkp_srstn_sub'.
Generating RTLIL representation for module `\pcounterN_clkp_srstn_sub_ccb'.
Generating RTLIL representation for module `\pcounter32_clkp_srstn_sub_ccb'.
Generating RTLIL representation for module `\pcounterN_clkp_srstn_sr'.
Generating RTLIL representation for module `\pcounter32_clkp_srstn_sr'.
Generating RTLIL representation for module `\pcounterN_clkp_srstn_sr_ccb'.
Generating RTLIL representation for module `\pcounter32_clkp_srstn_sr_ccb'.
Generating RTLIL representation for module `\pcounterN_clkp_srstn_sl'.
Generating RTLIL representation for module `\pcounter32_clkp_srstn_sl'.
Generating RTLIL representation for module `\pcounterN_clkp_srstn_sl_ccb'.
Generating RTLIL representation for module `\pcounter32_clkp_srstn_sl_ccb'.
Generating RTLIL representation for module `\pcounterN_clkp_srstp_load'.
Generating RTLIL representation for module `\pcounter32_clkp_srstp_load'.
Generating RTLIL representation for module `\pcounterN_clkp_srstp_load_ccb'.
Generating RTLIL representation for module `\pcounter32_clkp_srstp_load_ccb'.
Generating RTLIL representation for module `\pcounterN_clkp_srstp_add'.
Generating RTLIL representation for module `\pcounter32_clkp_srstp_add'.
Generating RTLIL representation for module `\pcounterN_clkp_srstp_add_ccb'.
Generating RTLIL representation for module `\pcounter32_clkp_srstp_add_ccb'.
Generating RTLIL representation for module `\pcounterN_clkp_srstp_sub'.
Generating RTLIL representation for module `\pcounter32_clkp_srstp_sub'.
Generating RTLIL representation for module `\pcounterN_clkp_srstp_sub_ccb'.
Generating RTLIL representation for module `\pcounter32_clkp_srstp_sub_ccb'.
Generating RTLIL representation for module `\pcounterN_clkp_srstp_sr'.
Generating RTLIL representation for module `\pcounter32_clkp_srstp_sr'.
Generating RTLIL representation for module `\pcounterN_clkp_srstp_sr_ccb'.
Generating RTLIL representation for module `\pcounter32_clkp_srstp_sr_ccb'.
Generating RTLIL representation for module `\pcounterN_clkp_srstp_sl'.
Generating RTLIL representation for module `\pcounter32_clkp_srstp_sl'.
Generating RTLIL representation for module `\pcounterN_clkp_srstp_sl_ccb'.
Generating RTLIL representation for module `\pcounter32_clkp_srstp_sl_ccb'.
Generating RTLIL representation for module `\pcounterN_clkp_arstn_load'.
Generating RTLIL representation for module `\pcounter32_clkp_arstn_load'.
Generating RTLIL representation for module `\pcounterN_clkp_arstn_load_ccb'.
Generating RTLIL representation for module `\pcounter32_clkp_arstn_load_ccb'.
Generating RTLIL representation for module `\pcounterN_clkp_arstn_add'.
Generating RTLIL representation for module `\pcounter32_clkp_arstn_add'.
Generating RTLIL representation for module `\pcounterN_clkp_arstn_add_ccb'.
Generating RTLIL representation for module `\pcounter32_clkp_arstn_add_ccb'.
Generating RTLIL representation for module `\pcounterN_clkp_arstn_sub'.
Generating RTLIL representation for module `\pcounter32_clkp_arstn_sub'.
Generating RTLIL representation for module `\pcounterN_clkp_arstn_sub_ccb'.
Generating RTLIL representation for module `\pcounter32_clkp_arstn_sub_ccb'.
Generating RTLIL representation for module `\pcounterN_clkp_arstn_sr'.
Generating RTLIL representation for module `\pcounter32_clkp_arstn_sr'.
Generating RTLIL representation for module `\pcounterN_clkp_arstn_sr_ccb'.
Generating RTLIL representation for module `\pcounter32_clkp_arstn_sr_ccb'.
Generating RTLIL representation for module `\pcounterN_clkp_arstn_sl'.
Generating RTLIL representation for module `\pcounter32_clkp_arstn_sl'.
Generating RTLIL representation for module `\pcounterN_clkp_arstn_sl_ccb'.
Generating RTLIL representation for module `\pcounter32_clkp_arstn_sl_ccb'.
Generating RTLIL representation for module `\pcounterN_clkp_arstp_load'.
Generating RTLIL representation for module `\pcounter32_clkp_arstp_load'.
Generating RTLIL representation for module `\pcounterN_clkp_arstp_load_ccb'.
Generating RTLIL representation for module `\pcounter32_clkp_arstp_load_ccb'.
Generating RTLIL representation for module `\pcounterN_clkp_arstp_add'.
Generating RTLIL representation for module `\pcounter32_clkp_arstp_add'.
Generating RTLIL representation for module `\pcounterN_clkp_arstp_add_ccb'.
Generating RTLIL representation for module `\pcounter32_clkp_arstp_add_ccb'.
Generating RTLIL representation for module `\pcounterN_clkp_arstp_sub'.
Generating RTLIL representation for module `\pcounter32_clkp_arstp_sub'.
Generating RTLIL representation for module `\pcounterN_clkp_arstp_sub_ccb'.
Generating RTLIL representation for module `\pcounter32_clkp_arstp_sub_ccb'.
Generating RTLIL representation for module `\pcounterN_clkp_arstp_sr'.
Generating RTLIL representation for module `\pcounter32_clkp_arstp_sr'.
Generating RTLIL representation for module `\pcounterN_clkp_arstp_sr_ccb'.
Generating RTLIL representation for module `\pcounter32_clkp_arstp_sr_ccb'.
Generating RTLIL representation for module `\pcounterN_clkp_arstp_sl'.
Generating RTLIL representation for module `\pcounter32_clkp_arstp_sl'.
Generating RTLIL representation for module `\pcounterN_clkp_arstp_sl_ccb'.
Generating RTLIL representation for module `\pcounter32_clkp_arstp_sl_ccb'.
Generating RTLIL representation for module `\pcounterN_clkn_srstn_load'.
Generating RTLIL representation for module `\pcounter32_clkn_srstn_load'.
Generating RTLIL representation for module `\pcounterN_clkn_srstn_load_ccb'.
Generating RTLIL representation for module `\pcounter32_clkn_srstn_load_ccb'.
Generating RTLIL representation for module `\pcounterN_clkn_srstn_add'.
Generating RTLIL representation for module `\pcounter32_clkn_srstn_add'.
Generating RTLIL representation for module `\pcounterN_clkn_srstn_add_ccb'.
Generating RTLIL representation for module `\pcounter32_clkn_srstn_add_ccb'.
Generating RTLIL representation for module `\pcounterN_clkn_srstn_sub'.
Generating RTLIL representation for module `\pcounter32_clkn_srstn_sub'.
Generating RTLIL representation for module `\pcounterN_clkn_srstn_sub_ccb'.
Generating RTLIL representation for module `\pcounter32_clkn_srstn_sub_ccb'.
Generating RTLIL representation for module `\pcounterN_clkn_srstn_sr'.
Generating RTLIL representation for module `\pcounter32_clkn_srstn_sr'.
Generating RTLIL representation for module `\pcounterN_clkn_srstn_sr_ccb'.
Generating RTLIL representation for module `\pcounter32_clkn_srstn_sr_ccb'.
Generating RTLIL representation for module `\pcounterN_clkn_srstn_sl'.
Generating RTLIL representation for module `\pcounter32_clkn_srstn_sl'.
Generating RTLIL representation for module `\pcounterN_clkn_srstn_sl_ccb'.
Generating RTLIL representation for module `\pcounter32_clkn_srstn_sl_ccb'.
Generating RTLIL representation for module `\pcounterN_clkn_srstp_load'.
Generating RTLIL representation for module `\pcounter32_clkn_srstp_load'.
Generating RTLIL representation for module `\pcounterN_clkn_srstp_load_ccb'.
Generating RTLIL representation for module `\pcounter32_clkn_srstp_load_ccb'.
Generating RTLIL representation for module `\pcounterN_clkn_srstp_add'.
Generating RTLIL representation for module `\pcounter32_clkn_srstp_add'.
Generating RTLIL representation for module `\pcounterN_clkn_srstp_add_ccb'.
Generating RTLIL representation for module `\pcounter32_clkn_srstp_add_ccb'.
Generating RTLIL representation for module `\pcounterN_clkn_srstp_sub'.
Generating RTLIL representation for module `\pcounter32_clkn_srstp_sub'.
Generating RTLIL representation for module `\pcounterN_clkn_srstp_sub_ccb'.
Generating RTLIL representation for module `\pcounter32_clkn_srstp_sub_ccb'.
Generating RTLIL representation for module `\pcounterN_clkn_srstp_sr'.
Generating RTLIL representation for module `\pcounter32_clkn_srstp_sr'.
Generating RTLIL representation for module `\pcounterN_clkn_srstp_sr_ccb'.
Generating RTLIL representation for module `\pcounter32_clkn_srstp_sr_ccb'.
Generating RTLIL representation for module `\pcounterN_clkn_srstp_sl'.
Generating RTLIL representation for module `\pcounter32_clkn_srstp_sl'.
Generating RTLIL representation for module `\pcounterN_clkn_srstp_sl_ccb'.
Generating RTLIL representation for module `\pcounter32_clkn_srstp_sl_ccb'.
Generating RTLIL representation for module `\pcounterN_clkn_arstn_load'.
Generating RTLIL representation for module `\pcounter32_clkn_arstn_load'.
Generating RTLIL representation for module `\pcounterN_clkn_arstn_load_ccb'.
Generating RTLIL representation for module `\pcounter32_clkn_arstn_load_ccb'.
Generating RTLIL representation for module `\pcounterN_clkn_arstn_add'.
Generating RTLIL representation for module `\pcounter32_clkn_arstn_add'.
Generating RTLIL representation for module `\pcounterN_clkn_arstn_add_ccb'.
Generating RTLIL representation for module `\pcounter32_clkn_arstn_add_ccb'.
Generating RTLIL representation for module `\pcounterN_clkn_arstn_sub'.
Generating RTLIL representation for module `\pcounter32_clkn_arstn_sub'.
Generating RTLIL representation for module `\pcounterN_clkn_arstn_sub_ccb'.
Generating RTLIL representation for module `\pcounter32_clkn_arstn_sub_ccb'.
Generating RTLIL representation for module `\pcounterN_clkn_arstn_sr'.
Generating RTLIL representation for module `\pcounter32_clkn_arstn_sr'.
Generating RTLIL representation for module `\pcounterN_clkn_arstn_sr_ccb'.
Generating RTLIL representation for module `\pcounter32_clkn_arstn_sr_ccb'.
Generating RTLIL representation for module `\pcounterN_clkn_arstn_sl'.
Generating RTLIL representation for module `\pcounter32_clkn_arstn_sl'.
Generating RTLIL representation for module `\pcounterN_clkn_arstn_sl_ccb'.
Generating RTLIL representation for module `\pcounter32_clkn_arstn_sl_ccb'.
Generating RTLIL representation for module `\pcounterN_clkn_arstp_load'.
Generating RTLIL representation for module `\pcounter32_clkn_arstp_load'.
Generating RTLIL representation for module `\pcounterN_clkn_arstp_load_ccb'.
Generating RTLIL representation for module `\pcounter32_clkn_arstp_load_ccb'.
Generating RTLIL representation for module `\pcounterN_clkn_arstp_add'.
Generating RTLIL representation for module `\pcounter32_clkn_arstp_add'.
Generating RTLIL representation for module `\pcounterN_clkn_arstp_add_ccb'.
Generating RTLIL representation for module `\pcounter32_clkn_arstp_add_ccb'.
Generating RTLIL representation for module `\pcounterN_clkn_arstp_sub'.
Generating RTLIL representation for module `\pcounter32_clkn_arstp_sub'.
Generating RTLIL representation for module `\pcounterN_clkn_arstp_sub_ccb'.
Generating RTLIL representation for module `\pcounter32_clkn_arstp_sub_ccb'.
Generating RTLIL representation for module `\pcounterN_clkn_arstp_sr'.
Generating RTLIL representation for module `\pcounter32_clkn_arstp_sr'.
Generating RTLIL representation for module `\pcounterN_clkn_arstp_sr_ccb'.
Generating RTLIL representation for module `\pcounter32_clkn_arstp_sr_ccb'.
Generating RTLIL representation for module `\pcounterN_clkn_arstp_sl'.
Generating RTLIL representation for module `\pcounter32_clkn_arstp_sl'.
Generating RTLIL representation for module `\pcounterN_clkn_arstp_sl_ccb'.
Generating RTLIL representation for module `\pcounter32_clkn_arstp_sl_ccb'.
Generating RTLIL representation for module `\ccb'.
Successfully finished Verilog frontend.

2.3. Executing HIERARCHY pass (managing design hierarchy).

2.3.1. Analyzing design hierarchy..
Top module:  \and2_or2

2.3.2. Analyzing design hierarchy..
Top module:  \and2_or2
Removed 0 unused modules.

2.4. Executing PROC pass (convert processes to netlists).

2.4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

2.4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:537$58 in module sdffnsn.
Marked 1 switch rules as full_case in process $proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:506$55 in module sdffnrn.
Marked 1 switch rules as full_case in process $proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:475$52 in module sdffns.
Marked 1 switch rules as full_case in process $proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:444$49 in module sdffnr.
Marked 1 switch rules as full_case in process $proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:413$46 in module dffnsn.
Marked 1 switch rules as full_case in process $proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:382$43 in module dffnrn.
Marked 1 switch rules as full_case in process $proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:351$40 in module dffns.
Marked 1 switch rules as full_case in process $proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:320$37 in module dffnr.
Marked 1 switch rules as full_case in process $proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:259$32 in module sdffsn.
Marked 1 switch rules as full_case in process $proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:228$29 in module sdffrn.
Marked 1 switch rules as full_case in process $proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:197$26 in module sdffs.
Marked 1 switch rules as full_case in process $proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:166$23 in module sdffr.
Marked 1 switch rules as full_case in process $proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:135$20 in module dffsn.
Marked 1 switch rules as full_case in process $proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:104$17 in module dffrn.
Marked 1 switch rules as full_case in process $proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:73$14 in module dffs.
Marked 1 switch rules as full_case in process $proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:42$11 in module dffr.
Removed a total of 0 dead cases.

2.4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 16 redundant assignments.
Promoted 20 assignments to connections.

2.4.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\sdffnsn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$60'.
  Set init value: \Q = 1'0
Found init rule in `\sdffnrn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$57'.
  Set init value: \Q = 1'0
Found init rule in `\sdffns.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$54'.
  Set init value: \Q = 1'0
Found init rule in `\sdffnr.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$51'.
  Set init value: \Q = 1'0
Found init rule in `\dffnsn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$48'.
  Set init value: \Q = 1'0
Found init rule in `\dffnrn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$45'.
  Set init value: \Q = 1'0
Found init rule in `\dffns.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$42'.
  Set init value: \Q = 1'0
Found init rule in `\dffnr.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$39'.
  Set init value: \Q = 1'0
Found init rule in `\dffn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$36'.
  Set init value: \Q = 1'0
Found init rule in `\sdffsn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$34'.
  Set init value: \Q = 1'0
Found init rule in `\sdffrn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$31'.
  Set init value: \Q = 1'0
Found init rule in `\sdffs.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$28'.
  Set init value: \Q = 1'0
Found init rule in `\sdffr.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$25'.
  Set init value: \Q = 1'0
Found init rule in `\dffsn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$22'.
  Set init value: \Q = 1'0
Found init rule in `\dffrn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$19'.
  Set init value: \Q = 1'0
Found init rule in `\dffs.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$16'.
  Set init value: \Q = 1'0
Found init rule in `\dffr.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$13'.
  Set init value: \Q = 1'0
Found init rule in `\dff.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$10'.
  Set init value: \Q = 1'0

2.4.5. Executing PROC_ARST pass (detect async resets in processes).
Found async reset \SN in `\dffnsn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:413$46'.
Found async reset \RN in `\dffnrn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:382$43'.
Found async reset \S in `\dffns.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:351$40'.
Found async reset \R in `\dffnr.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:320$37'.
Found async reset \SN in `\dffsn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:135$20'.
Found async reset \RN in `\dffrn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:104$17'.
Found async reset \S in `\dffs.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:73$14'.
Found async reset \R in `\dffr.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:42$11'.

2.4.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~8 debug messages>

2.4.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\sdffnsn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$60'.
Creating decoders for process `\sdffnsn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:537$58'.
     1/1: $0\Q[0:0]
Creating decoders for process `\sdffnrn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$57'.
Creating decoders for process `\sdffnrn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:506$55'.
     1/1: $0\Q[0:0]
Creating decoders for process `\sdffns.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$54'.
Creating decoders for process `\sdffns.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:475$52'.
     1/1: $0\Q[0:0]
Creating decoders for process `\sdffnr.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$51'.
Creating decoders for process `\sdffnr.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:444$49'.
     1/1: $0\Q[0:0]
Creating decoders for process `\dffnsn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$48'.
Creating decoders for process `\dffnsn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:413$46'.
     1/1: $0\Q[0:0]
Creating decoders for process `\dffnrn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$45'.
Creating decoders for process `\dffnrn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:382$43'.
     1/1: $0\Q[0:0]
Creating decoders for process `\dffns.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$42'.
Creating decoders for process `\dffns.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:351$40'.
     1/1: $0\Q[0:0]
Creating decoders for process `\dffnr.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$39'.
Creating decoders for process `\dffnr.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:320$37'.
     1/1: $0\Q[0:0]
Creating decoders for process `\dffn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$36'.
Creating decoders for process `\dffn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:292$35'.
Creating decoders for process `\sdffsn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$34'.
Creating decoders for process `\sdffsn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:259$32'.
     1/1: $0\Q[0:0]
Creating decoders for process `\sdffrn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$31'.
Creating decoders for process `\sdffrn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:228$29'.
     1/1: $0\Q[0:0]
Creating decoders for process `\sdffs.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$28'.
Creating decoders for process `\sdffs.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:197$26'.
     1/1: $0\Q[0:0]
Creating decoders for process `\sdffr.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$25'.
Creating decoders for process `\sdffr.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:166$23'.
     1/1: $0\Q[0:0]
Creating decoders for process `\dffsn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$22'.
Creating decoders for process `\dffsn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:135$20'.
     1/1: $0\Q[0:0]
Creating decoders for process `\dffrn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$19'.
Creating decoders for process `\dffrn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:104$17'.
     1/1: $0\Q[0:0]
Creating decoders for process `\dffs.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$16'.
Creating decoders for process `\dffs.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:73$14'.
     1/1: $0\Q[0:0]
Creating decoders for process `\dffr.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$13'.
Creating decoders for process `\dffr.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:42$11'.
     1/1: $0\Q[0:0]
Creating decoders for process `\dff.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$10'.
Creating decoders for process `\dff.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:17$9'.

2.4.8. Executing PROC_DLATCH pass (convert process syncs to latches).

2.4.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\sdffnsn.\Q' using process `\sdffnsn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:537$58'.
  created $dff cell `$procdff$85' with negative edge clock.
Creating register for signal `\sdffnrn.\Q' using process `\sdffnrn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:506$55'.
  created $dff cell `$procdff$86' with negative edge clock.
Creating register for signal `\sdffns.\Q' using process `\sdffns.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:475$52'.
  created $dff cell `$procdff$87' with negative edge clock.
Creating register for signal `\sdffnr.\Q' using process `\sdffnr.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:444$49'.
  created $dff cell `$procdff$88' with negative edge clock.
Creating register for signal `\dffnsn.\Q' using process `\dffnsn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:413$46'.
  created $adff cell `$procdff$93' with negative edge clock and positive level reset.
Creating register for signal `\dffnrn.\Q' using process `\dffnrn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:382$43'.
  created $adff cell `$procdff$98' with negative edge clock and positive level reset.
Creating register for signal `\dffns.\Q' using process `\dffns.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:351$40'.
  created $adff cell `$procdff$101' with negative edge clock and positive level reset.
Creating register for signal `\dffnr.\Q' using process `\dffnr.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:320$37'.
  created $adff cell `$procdff$104' with negative edge clock and positive level reset.
Creating register for signal `\dffn.\Q' using process `\dffn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:292$35'.
  created $dff cell `$procdff$105' with negative edge clock.
Creating register for signal `\sdffsn.\Q' using process `\sdffsn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:259$32'.
  created $dff cell `$procdff$106' with positive edge clock.
Creating register for signal `\sdffrn.\Q' using process `\sdffrn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:228$29'.
  created $dff cell `$procdff$107' with positive edge clock.
Creating register for signal `\sdffs.\Q' using process `\sdffs.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:197$26'.
  created $dff cell `$procdff$108' with positive edge clock.
Creating register for signal `\sdffr.\Q' using process `\sdffr.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:166$23'.
  created $dff cell `$procdff$109' with positive edge clock.
Creating register for signal `\dffsn.\Q' using process `\dffsn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:135$20'.
  created $adff cell `$procdff$114' with positive edge clock and positive level reset.
Creating register for signal `\dffrn.\Q' using process `\dffrn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:104$17'.
  created $adff cell `$procdff$119' with positive edge clock and positive level reset.
Creating register for signal `\dffs.\Q' using process `\dffs.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:73$14'.
  created $adff cell `$procdff$122' with positive edge clock and positive level reset.
Creating register for signal `\dffr.\Q' using process `\dffr.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:42$11'.
  created $adff cell `$procdff$125' with positive edge clock and positive level reset.
Creating register for signal `\dff.\Q' using process `\dff.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:17$9'.
  created $dff cell `$procdff$126' with positive edge clock.

2.4.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

2.4.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `sdffnsn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$60'.
Found and cleaned up 1 empty switch in `\sdffnsn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:537$58'.
Removing empty process `sdffnsn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:537$58'.
Removing empty process `sdffnrn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$57'.
Found and cleaned up 1 empty switch in `\sdffnrn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:506$55'.
Removing empty process `sdffnrn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:506$55'.
Removing empty process `sdffns.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$54'.
Found and cleaned up 1 empty switch in `\sdffns.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:475$52'.
Removing empty process `sdffns.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:475$52'.
Removing empty process `sdffnr.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$51'.
Found and cleaned up 1 empty switch in `\sdffnr.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:444$49'.
Removing empty process `sdffnr.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:444$49'.
Removing empty process `dffnsn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$48'.
Removing empty process `dffnsn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:413$46'.
Removing empty process `dffnrn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$45'.
Removing empty process `dffnrn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:382$43'.
Removing empty process `dffns.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$42'.
Removing empty process `dffns.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:351$40'.
Removing empty process `dffnr.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$39'.
Removing empty process `dffnr.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:320$37'.
Removing empty process `dffn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$36'.
Removing empty process `dffn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:292$35'.
Removing empty process `sdffsn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$34'.
Found and cleaned up 1 empty switch in `\sdffsn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:259$32'.
Removing empty process `sdffsn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:259$32'.
Removing empty process `sdffrn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$31'.
Found and cleaned up 1 empty switch in `\sdffrn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:228$29'.
Removing empty process `sdffrn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:228$29'.
Removing empty process `sdffs.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$28'.
Found and cleaned up 1 empty switch in `\sdffs.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:197$26'.
Removing empty process `sdffs.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:197$26'.
Removing empty process `sdffr.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$25'.
Found and cleaned up 1 empty switch in `\sdffr.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:166$23'.
Removing empty process `sdffr.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:166$23'.
Removing empty process `dffsn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$22'.
Removing empty process `dffsn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:135$20'.
Removing empty process `dffrn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$19'.
Removing empty process `dffrn.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:104$17'.
Removing empty process `dffs.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$16'.
Removing empty process `dffs.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:73$14'.
Removing empty process `dffr.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$13'.
Removing empty process `dffr.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:42$11'.
Removing empty process `dff.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:0$10'.
Removing empty process `dff.$proc$/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/cell_sim_ff.v:17$9'.
Cleaned up 8 empty switches.

2.4.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module and2_or2.

2.5. Executing FLATTEN pass (flatten design).

2.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module and2_or2.

2.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \and2_or2..
Removed 0 unused cells and 2 unused wires.
<suppressed ~1 debug messages>

2.8. Executing DEMINOUT pass (demote inout ports to input or output).

2.9. Executing OPT pass (performing simple optimizations).

2.9.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module and2_or2.

2.9.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\and2_or2'.
Removed a total of 0 cells.

2.9.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \and2_or2..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.9.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \and2_or2.
Performed a total of 0 changes.

2.9.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\and2_or2'.
Removed a total of 0 cells.

2.9.6. Executing OPT_DFF pass (perform DFF optimizations).

2.9.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \and2_or2..

2.9.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module and2_or2.

2.9.9. Finished OPT passes. (There is nothing left to do.)

2.10. Executing CHECK pass (checking for obvious problems).
Checking module and2_or2...
Found and reported 0 problems.

2.11. Executing OPT pass (performing simple optimizations).

2.11.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module and2_or2.

2.11.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\and2_or2'.
Removed a total of 0 cells.

2.11.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \and2_or2..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.11.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \and2_or2.
Performed a total of 0 changes.

2.11.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\and2_or2'.
Removed a total of 0 cells.

2.11.6. Executing OPT_DFF pass (perform DFF optimizations).

2.11.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \and2_or2..

2.11.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module and2_or2.

2.11.9. Finished OPT passes. (There is nothing left to do.)

2.12. Executing FSM pass (extract and optimize FSM).

2.12.1. Executing FSM_DETECT pass (finding FSMs in design).

2.12.2. Executing FSM_EXTRACT pass (extracting FSM from design).

2.12.3. Executing FSM_OPT pass (simple optimizations of FSMs).

2.12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \and2_or2..

2.12.5. Executing FSM_OPT pass (simple optimizations of FSMs).

2.12.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

2.12.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

2.12.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

2.13. Executing OPT pass (performing simple optimizations).

2.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module and2_or2.

2.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\and2_or2'.
Removed a total of 0 cells.

2.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \and2_or2..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \and2_or2.
Performed a total of 0 changes.

2.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\and2_or2'.
Removed a total of 0 cells.

2.13.6. Executing OPT_DFF pass (perform DFF optimizations).

2.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \and2_or2..

2.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module and2_or2.

2.13.9. Finished OPT passes. (There is nothing left to do.)

2.14. Executing WREDUCE pass (reducing word size of cells).

2.15. Executing PEEPOPT pass (run peephole optimizers).

2.16. Executing PMUXTREE pass.

2.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \and2_or2..

2.18. Executing SHARE pass (SAT-based resource sharing).

2.19. Executing TECHMAP pass (map to technology primitives).

2.19.1. Executing Verilog-2005 frontend: /rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

2.19.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~6 debug messages>

2.20. Executing OPT_EXPR pass (perform const folding).
Optimizing module and2_or2.

2.21. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \and2_or2..

2.22. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module and2_or2:
  created 0 $alu and 0 $macc cells.

2.23. Executing PMUXTREE pass.

2.24. Executing OPT pass (performing simple optimizations).

2.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module and2_or2.

2.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\and2_or2'.
Removed a total of 0 cells.

2.24.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \and2_or2..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.24.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \and2_or2.
Performed a total of 0 changes.

2.24.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\and2_or2'.
Removed a total of 0 cells.

2.24.6. Executing OPT_DFF pass (perform DFF optimizations).

2.24.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \and2_or2..

2.24.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module and2_or2.

2.24.9. Finished OPT passes. (There is nothing left to do.)

2.25. Executing MEMORY pass.

2.25.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.25.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

2.25.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

2.25.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

2.25.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

2.25.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \and2_or2..

2.25.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.25.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

2.25.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \and2_or2..

2.25.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.26. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \and2_or2..

2.27. Executing OPT pass (performing simple optimizations).

2.27.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module and2_or2.

2.27.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\and2_or2'.
Removed a total of 0 cells.

2.27.3. Executing OPT_DFF pass (perform DFF optimizations).

2.27.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \and2_or2..

2.27.5. Finished fast OPT passes.

2.28. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

2.29. Executing OPT pass (performing simple optimizations).

2.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module and2_or2.

2.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\and2_or2'.
Removed a total of 0 cells.

2.29.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \and2_or2..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.29.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \and2_or2.
Performed a total of 0 changes.

2.29.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\and2_or2'.
Removed a total of 0 cells.

2.29.6. Executing OPT_DFF pass (perform DFF optimizations).

2.29.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \and2_or2..

2.29.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module and2_or2.

2.29.9. Finished OPT passes. (There is nothing left to do.)

2.30. Executing TECHMAP pass (map to technology primitives).

2.30.1. Executing Verilog-2005 frontend: /rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/techmap.v
Parsing Verilog input from `/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu_brent_kung'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

2.30.2. Executing Verilog-2005 frontend: /rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/arith_map.v
Parsing Verilog input from `/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_quicklogic_alu'.
Successfully finished Verilog frontend.

2.30.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~77 debug messages>

2.31. Executing OPT pass (performing simple optimizations).

2.31.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module and2_or2.

2.31.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\and2_or2'.
Removed a total of 0 cells.

2.31.3. Executing OPT_DFF pass (perform DFF optimizations).

2.31.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \and2_or2..

2.31.5. Finished fast OPT passes.

2.32. Executing OPT_EXPR pass (perform const folding).
Optimizing module and2_or2.

2.33. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\and2_or2'.
Removed a total of 0 cells.

2.34. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \and2_or2..

2.35. Executing OPT pass (performing simple optimizations).

2.35.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module and2_or2.

2.35.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\and2_or2'.
Removed a total of 0 cells.

2.35.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \and2_or2..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.35.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \and2_or2.
Performed a total of 0 changes.

2.35.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\and2_or2'.
Removed a total of 0 cells.

2.35.6. Executing OPT_DFF pass (perform DFF optimizations).

2.35.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \and2_or2..

2.35.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module and2_or2.

2.35.9. Finished OPT passes. (There is nothing left to do.)

2.36. Executing MEMORY pass.

2.36.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

2.36.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

2.36.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

2.36.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

2.36.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

2.36.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \and2_or2..

2.36.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

2.36.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

2.36.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \and2_or2..

2.36.10. Executing MEMORY_COLLECT pass (generating $mem cells).

2.36.11. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

2.37. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

2.38. Executing TECHMAP pass (map to technology primitives).

2.38.1. Executing Verilog-2005 frontend: /rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/dff_map.v
Parsing Verilog input from `/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/dff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

2.38.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~20 debug messages>

2.39. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

2.40. Executing TECHMAP pass (map to technology primitives).

2.40.1. Executing Verilog-2005 frontend: /rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/dff_map.v
Parsing Verilog input from `/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/dff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

2.40.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~20 debug messages>

2.41. Executing OPT_EXPR pass (perform const folding).
Optimizing module and2_or2.

2.42. Executing SIMPLEMAP pass (map simple cells to gate primitives).

2.43. Executing OPT_EXPR pass (perform const folding).
Optimizing module and2_or2.

2.44. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\and2_or2'.
Removed a total of 0 cells.

2.45. Executing OPT_DFF pass (perform DFF optimizations).

2.46. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \and2_or2..

2.47. Executing OPT pass (performing simple optimizations).

2.47.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module and2_or2.

2.47.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\and2_or2'.
Removed a total of 0 cells.

2.47.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \and2_or2..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

2.47.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \and2_or2.
Performed a total of 0 changes.

2.47.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\and2_or2'.
Removed a total of 0 cells.

2.47.6. Executing OPT_DFF pass (perform DFF optimizations).

2.47.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \and2_or2..

2.47.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module and2_or2.

2.47.9. Finished OPT passes. (There is nothing left to do.)

2.48. Executing ABC pass (technology mapping using ABC).

2.48.1. Extracting gate netlist of module `\and2_or2' to `<abc-temp-dir>/input.blif'..
Extracted 2 gates and 4 wires to a netlist network with 2 inputs and 2 outputs.

2.48.1.1. Executing ABC.
Running ABC command: "<yosys-exe-dir>/yosys-abc" -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + &get -n 
ABC: + &fraig -x 
ABC: + &put 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + write_blif <abc-temp-dir>/output.blif 

2.48.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:        2
ABC RESULTS:        internal signals:        0
ABC RESULTS:           input signals:        2
ABC RESULTS:          output signals:        2
Removing temp directory.

2.49. Executing TECHMAP pass (map to technology primitives).

2.49.1. Executing Verilog-2005 frontend: /rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/dff_map.v
Parsing Verilog input from `/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/dff_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Successfully finished Verilog frontend.

2.49.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~20 debug messages>

2.50. Executing TECHMAP pass (map to technology primitives).

2.50.1. Executing Verilog-2005 frontend: /rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/arith_map.v
Parsing Verilog input from `/rapidsilicon/data/ArkAngel_Engineering_v0.9.841/bin/../share/yosys/rapidflex/alkaidC/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_quicklogic_alu'.
Successfully finished Verilog frontend.

2.50.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

2.51. Executing AUTONAME pass.

2.52. Executing HIERARCHY pass (managing design hierarchy).
Attribute `top' found on module `and2_or2'. Setting top module to and2_or2.

2.52.1. Analyzing design hierarchy..
Top module:  \and2_or2

2.52.2. Analyzing design hierarchy..
Top module:  \and2_or2
Removed 0 unused modules.

2.53. Printing statistics.

=== and2_or2 ===

   Number of wires:                  8
   Number of wire bits:              8
   Number of public wires:           4
   Number of public wire bits:       4
   Number of ports:                  4
   Number of port bits:              4
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  2
     $lut                            2

2.54. Executing CHECK pass (checking for obvious problems).
Checking module and2_or2...
Found and reported 0 problems.

2.55. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \and2_or2..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

2.56. Executing CHECK pass (checking for obvious problems).
Checking module and2_or2...
Found and reported 0 problems.
Arguments to the command insert_clock_buffer:
  insert_clock_buffer
  -top
  -top
  and2_or2
  -cell_map_file
  /home/yhjiang/Desktop/test_project/to_Mickey/20250911/0.9.841/alkaid_exto/alkaid_ex_bitstream/iter0/vpr_results/checkin/and2_or2/tt_25C_v1p1/ckbuf_cell_map.xml
cell map location is /home/yhjiang/Desktop/test_project/to_Mickey/20250911/0.9.841/alkaid_exto/alkaid_ex_bitstream/iter0/vpr_results/checkin/and2_or2/tt_25C_v1p1/ckbuf_cell_map.xml 
Top module in current design: and2_or2 
Found internal cell \and2_or2.$abc$210$auto$blifparse.cc:535:parse_blif$211 ($lut) 
  cell $lut $abc$210$auto$blifparse.cc:535:parse_blif$211
    parameter \LUT 4'1000
    parameter \WIDTH 2
    connect \A { \b \a }
    connect \Y \c
  end
Found internal cell \and2_or2.$abc$210$auto$blifparse.cc:535:parse_blif$212 ($lut) 
  cell $lut $abc$210$auto$blifparse.cc:535:parse_blif$212
    parameter \LUT 4'1110
    parameter \WIDTH 2
    connect \A { \b \a }
    connect \Y \d
  end
Ckbuf info is empty. No cell map file will be generated! 

2.57. Executing BLIF backend.

2.58. Executing Verilog backend.

2.58.1. Executing BMUXMAP pass.

2.58.2. Executing DEMUXMAP pass.
Dumping module `\and2_or2'.
{
   "creator": "Yosys 0.51+17 (git sha1 42ca75b6b, g++ 11.4.0-13 -fPIC -O3)",
   "invocation": "stat -json -top and2_or2 ",
   "modules": {
      "\\and2_or2": {
         "num_wires":         4,
         "num_wire_bits":     4,
         "num_pub_wires":     4,
         "num_pub_wire_bits": 4,
         "num_ports":         4,
         "num_port_bits":     4,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         2,
         "num_cells_by_type": {
            "$lut": 2
         }
      }
   },
      "design": {
         "num_wires":         4,
         "num_wire_bits":     4,
         "num_pub_wires":     4,
         "num_pub_wire_bits": 4,
         "num_ports":         4,
         "num_port_bits":     4,
         "num_memories":      0,
         "num_memory_bits":   0,
         "num_processes":     0,
         "num_cells":         2,
         "num_cells_by_type": {
            "$lut": 2
         }
      }
}

Warnings: 2 unique messages, 2 total
End of script. Logfile hash: 3693251d54, CPU: user 0.23s system 0.01s, MEM: 24.62 MB peak
Yosys 0.51+17 (git sha1 42ca75b6b, g++ 11.4.0-13 -fPIC -O3)
Time spent: 39% 12x read_verilog (0 sec), 23% 1x abc (0 sec), ...
